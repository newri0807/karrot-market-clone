// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  products   Product[]  @relation("UserProducts")
  purchases  Product[]  @relation("UserPurchases")
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  reviews    Review[]
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  reviews     Review[]
  sold        Boolean    @default(false)
  buyer       User?      @relation("UserPurchases", fields: [buyerId], references: [id])
  buyerId     Int?
  ChatRoom    ChatRoom[]
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  comments   Comment[]
  likes      Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id(name: "id", [userId, postId]) // => 1 유저가 1개의 포스트에만 좋아요 가능
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  productId  Int
  Product    Product   @relation(fields: [productId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
  read       Boolean  @default(false)
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}
